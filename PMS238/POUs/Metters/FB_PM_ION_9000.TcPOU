<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_PM_ION_9000" Id="{3144cca2-e01a-4bd8-8d67-705318f2ad05}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PM_ION_9000

VAR_INPUT
	bExecute	: BOOL;
END_VAR

VAR_OUTPUT
	Q			: BOOL;
END_VAR

VAR_IN_OUT
	PM		:	ST_PowerMeter;
END_VAR

VAR
	fbReadRegs      	: FB_MBReadRegs;
	nState				: INT;
	nQuantity       	: WORD:=125;
	nMBAddr             : WORD:=1;
	bDoReading			: BOOL;
	
	bReadRegsBusy   	: BOOL;
	bReadRegsError  	: BOOL;
	nReadRegsErrorId    : UDINT;
	nReadRegsCount  	: UDINT;
	
	nCount				: DINT;
	rTrigExecute		: R_TRIG;
	

	nMBAddressDestAddr	: WORD;
	arrRawData			: ARRAY[0..124] OF WORD;
	iloop				: INT;
	offset				: UDINT;
END_VAR

VAR CONSTANT
	STATE_IDLE			:	INT		:=0;
	STATE_INIT			:	INT		:=5;
	STATE_PREPARE		:	INT		:=10;
	STATE_READ			:	INT		:=20;
	STATE_ERROR			:	INT		:=30;
	STATE_CALCULATE		:	INT		:= 90;
END_VAR
VAR PERSISTENT
	validEnvergyIntoLoad : LREAL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[rTrigExecute(clk:= bExecute);
IF rTrigExecute.Q THEN
	nState		:= STATE_INIT;
END_IF

CASE nState OF
STATE_IDLE:
	nCount	:=	nCount + 1;
	
STATE_INIT:
	nMBAddr			:= 0;
	Q				:= TRUE;
	bDoReading		:= TRUE;
	nState			:= STATE_PREPARE;
	nQuantity		:= 125;
	
STATE_PREPARE:
	IF nMBAddr=0 THEN
		nMBAddr	:= 1;
	ELSIF nMBAddr > 3300 AND nMBAddr < 20000   THEN
		nMBAddr	:= 21296;
	ELSE
		nMBAddr	:= nMBAddr + 125;
	END_IF
	
	
	IF  nMBAddr > 21500 THEN
		nState		:= STATE_CALCULATE;
	ELSE 
		nState				:= STATE_READ;
		fbReadRegs.bExecute	:= FALSE;
	END_IF
STATE_READ:
	IF nMBAddr <20000 THEN
		nMBAddressDestAddr := nMBAddr;
	ELSIF nMBAddr >= 21296 THEN
		nMBAddressDestAddr := nMBAddr - 15000 ;		
	END_IF
	fbReadRegs (
			sIPAddr		:= PM.Conn.sIPAddress,
			nTCPPort	:= PM.Conn.nPort,
			nUnitID		:= PM.Conn.nUnitID,
			nQuantity	:= nQuantity,
			nMBAddr		:= nMBAddr,
			cbLength	:= nQuantity*2,
			pDestAddr	:= ADR(PM.RawData) + nMBAddressDestAddr*2 + 2,
			bExecute	:= TRUE,
			bBusy		=> bReadRegsBusy,
			bError		=> bReadRegsError,
			nErrId		=> nReadRegsErrorId,
			cbRead		=> nReadRegsCount
		);
	IF NOT fbReadRegs.bBusy THEN
		fbReadRegs(bExecute:= FALSE);
		nState			:= STATE_PREPARE;
	END_IF
STATE_CALCULATE:
	//PM.Basic.Current_Unbalane_A 		:= F_Read_RegFloat32(PM:= PM, address:= ION9000_E_Current_Unbalane_A);
	//PM.Basic.Current_Unbalane_B 		:= F_Read_RegFloat32(PM:= PM, address:=E_PM5350.E_Current_Unbalane_B);
	//PM.Basic.Current_Unbalane_C 		:= F_Read_RegFloat32(PM:= PM, address:=E_PM5350.E_Current_Unbalane_C);
	PM.Basic.Current_Unbalane_Worst 	:= F_Read_RegFloat32(PM:= PM, address:= ION9000_E_Current_Unbalane_Worst);
	//PM.Basic.Current_Unbalane_AB 		:= F_Read_RegFloat32(PM:= PM, address:=E_PM5350.E_Current_Unbalane_AB);
	//	PM.Basic.Current_Unbalane_BC		:= F_Read_RegFloat32(PM:= PM, address:=E_PM5350.E_Current_Unbalane_BC);
	//	PM.Basic.Current_Unbalane_CA 		:= F_Read_RegFloat32(PM:= PM, address:=E_PM5350.E_Current_Unbalane_CA);
	//	PM.Basic.Current_Unbalane_LL_Worst 	:= F_Read_RegFloat32(PM:= PM, address:=E_PM5350.E_Current_Unbalane_LL_Worst);
	//	PM.Basic.Current_Unbalane_AN 		:= F_Read_RegFloat32(PM:= PM, address:=E_PM5350.E_Current_Unbalane_AN);
	//	PM.Basic.Current_Unbalane_BN 		:= F_Read_RegFloat32(PM:= PM, address:=E_PM5350.E_Current_Unbalane_BN);
	//	PM.Basic.Current_Unbalane_CN 		:= F_Read_RegFloat32(PM:= PM, address:=E_PM5350.E_Current_Unbalane_CN);
	//PM.Basic.Current_Unbalane_LN_Worst	:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Current_Unbalane_LN_Worst);
	PM.Basic.Real_PowerA 				:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Real_PowerA)/1000;//kw
	PM.Basic.Real_PowerB 				:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Real_PowerB)/1000;
	PM.Basic.Real_PowerC 				:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Real_PowerC)/1000;
	PM.Basic.Real_PowerTotal 			:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Real_PowerTotal)/1000;
	
	PM.Basic.Reactive_PowerA 			:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Reactive_PowerA)/1000;
	PM.Basic.Reactive_PowerB 			:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Reactive_PowerB)/1000;
	PM.Basic.Reactive_PowerC 			:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Reactive_PowerC)/1000;
	PM.Basic.Reactive_PowerTotal 		:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Reactive_PowerTotal)/1000;
	
	PM.Basic.Apparent_PowerA 			:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Apparent_PowerA)/1000;
	PM.Basic.Apparent_PowerB 			:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Apparent_PowerB)/1000;
	PM.Basic.Apparent_PowerC 			:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Apparent_PowerC)/1000;
	PM.Basic.Apparent_PowerTotal 		:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Apparent_PowerTotal)/1000;
	
	PM.Basic.Voltage_AB 			:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Voltage_AB);
	PM.Basic.Voltage_BC 			:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Voltage_BC);
	PM.Basic.Voltage_CA 			:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Voltage_CA);
	PM.Basic.Voltage_LLAvg 			:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Voltage_LLAvg);
	PM.Basic.Voltage_AN 			:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Voltage_AN);
	PM.Basic.Voltage_BN 			:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Voltage_BN);
	PM.Basic.Voltage_CN 			:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Voltage_CN);
	PM.Basic.Voltage_LNAvg 			:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Voltage_LNAvg);
		
	PM.Basic.Current_A 				:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Current_A);
	PM.Basic.Current_B 				:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Current_B);
	PM.Basic.Current_C 				:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Current_C);
	PM.Basic.Current_N 				:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Current_N);
	PM.Basic.Current_G 				:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Current_G);
	PM.Basic.Current_Avg 			:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Current_Avg);
	
	PM.Basic.RealEnergy_IntoLoad 					:= F_Read_RegInt64(PM:= PM, address:=ION9000_E_RealEnergy_IntoLoad);
	PM.Basic.RealEnergy_OutLoad 					:= F_Read_RegInt64(PM:= PM, address:=ION9000_E_RealEnergy_OutLoad);
	PM.Basic.RealEnergy_Absolute 					:= F_Read_RegInt64(PM:= PM, address:=ION9000_E_RealEnergy_Absolute);
	PM.Basic.RealEnergy_Signed 						:= F_Read_RegInt64(PM:= PM, address:=ION9000_E_RealEnergy_Signed);
	PM.Basic.ReactiveEnergy_IntoLoad 				:= F_Read_RegInt64(PM:= PM, address:=ION9000_E_ReactiveEnergy_IntoLoad);
	PM.Basic.ReactiveEnergy_OutLoad 				:= F_Read_RegInt64(PM:= PM, address:=ION9000_E_ReactiveEnergy_OutLoad);
	PM.Basic.ReactiveEnergy_Absolute 				:= F_Read_RegInt64(PM:= PM, address:=ION9000_E_ReactiveEnergy_Absolute);
	PM.Basic.ReactiveEnergy_Signed 					:= F_Read_RegInt64(PM:= PM, address:=ION9000_E_ReactiveEnergy_Signed);
	PM.Basic.ApparentEnergy_IntoLoad 				:= F_Read_RegInt64(PM:= PM, address:=ION9000_E_ApparentEnergy_IntoLoad);
	PM.Basic.ApparentEnergy_OutLoad 				:= F_Read_RegInt64(PM:= PM, address:=ION9000_E_ApparentEnergy_OutLoad);
	PM.Basic.ApparentEnergy 						:= F_Read_RegInt64(PM:= PM, address:=ION9000_E_ApparentEnergy);
	PM.Basic.ApparentEnergy_Delivered_Received 		:= F_Read_RegInt64(PM:= PM, address:=ION9000_E_ApparentEnergy_Delivered_Received);
	
	PM.Basic.Frequency 				:= F_Read_RegFloat32(PM:= PM, address:=ION9000_E_Frequency );
	PM.Basic.PowerFactor			:= -1*F_Read_RegFloat32(PM := PM, address :=  ION9000_E_PowerFactor);	
	PM.Basic.THDF_Current_A 		:=  100* F_Read_RegFloat32(PM := PM, address := ION9000_E_THDF_Current_A-15000);
	PM.Basic.THDF_Current_B			:= 100* F_Read_RegFloat32(PM := PM, address := ION9000_E_THDF_Current_b-15000);
	PM.Basic.THDF_Current_C 		:= 100* F_Read_RegFloat32(PM := PM, address := ION9000_E_THDF_Current_c-15000);
	PM.Basic.THDF_Current_N 		:= 100* F_Read_RegFloat32(PM := PM, address := ION9000_E_THDF_Current_g-15000);
	PM.Basic.THDF_Voltage_LN		:= 100* F_Read_RegFloat32(PM := PM, address := ION9000_E_THDF_Voltage_LN-15000);
	PM.Basic.THDF_Voltage_AB		:= 100* F_Read_RegFloat32(PM := PM, address := ION9000_E_THDF_Voltage_AN-15000);
	PM.Basic.THDF_Voltage_BC		:= 100* F_Read_RegFloat32(PM := PM, address := ION9000_E_THDF_Voltage_BN-15000);	
	PM.Basic.THDF_Voltage_CA		:= 100* F_Read_RegFloat32(PM := PM, address := ION9000_E_THDF_Voltage_CN-15000);
	nState		:=	STATE_IDLE;	
	nMBAddr		:= 	0;
	Q			:= 	FALSE;
	bDoReading	:= 	FALSE;

	(*PM.Basic.RealEnergy_IntoLoad := F_RoundLrealEx(	lrIn 	:= PM.Basic.RealEnergy_IntoLoad,
										iPrecision 	:= 0);*)
												
	PM.Basic.PowerFactor := F_RoundLrealEx(	lrIn 	:= PM.Basic.PowerFactor,
								iPrecision 	:= 2);
								
	IF IsGoodData (pm.Basic.RealEnergy_IntoLoad )  THEN
		;// pm.Basic.RealEnergy_IntoLoad still it
		validEnvergyIntoLoad := pm.Basic.RealEnergy_IntoLoad;
	ELSE
		pm.Basic.RealEnergy_IntoLoad := validEnvergyIntoLoad;
	END_IF	
								
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="FB_PM_ION_9000">
      <LineId Id="131" Count="19" />
      <LineId Id="392" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="414" Count="0" />
      <LineId Id="413" Count="0" />
      <LineId Id="408" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="415" Count="2" />
      <LineId Id="410" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="395" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="399" Count="1" />
      <LineId Id="398" Count="0" />
      <LineId Id="162" Count="30" />
      <LineId Id="288" Count="23" />
      <LineId Id="315" Count="20" />
      <LineId Id="193" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="385" Count="2" />
      <LineId Id="243" Count="0" />
      <LineId Id="388" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="389" Count="0" />
      <LineId Id="244" Count="2" />
      <LineId Id="405" Count="0" />
      <LineId Id="463" Count="4" />
      <LineId Id="519" Count="0" />
      <LineId Id="514" Count="4" />
      <LineId Id="462" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="19" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>